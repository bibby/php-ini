<?php
namespace CodeGun\Ini;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-13 at 09:16:45.
 */
class BuilderTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @covers CodeGun\Ini\Builder::build
	 * @dataProvider dataSets
	 */
	public function testBuild($input, $output)
	{
		$this->assertEquals(
			$output["array"],
			Builder::build($input)
		);
	}



	/**
	 * @covers CodeGun\Ini\Builder::buildString
	 * @dataProvider dataSets
	 */
	public function testBuildString($input, $output)
	{
		$this->assertEquals(
			$output["string"],
			Builder::buildString($input)
		);
	}

	/**
	 * @covers CodeGun\Ini\Builder::get
	 * @dataProvider dataSets
	 */
	public function testGet($input, $output)
	{
		$builder = new Builder($input);
		$this->assertEquals(
			$output["string"],
			$builder->get()
		);
	}

	/**
	 * @covers CodeGun\Ini\Builder::saveFile
	 * @dataProvider datasets
	 */
	public function testSaveFile_exists($input, $output)
	{
		$tmp=tempnam("/tmp", "buildertest_");
		$builder = new Builder($input);
		$bytes = $builder->saveFile($tmp);

		$exists = is_file($tmp);
		if($exists)
			unlink($tmp);

		$this->assertTrue($exists);
	}

	/**
	 * @covers CodeGun\Ini\Builder::saveFile
	 * @dataProvider datasets
	 */
	public function testSaveFile_bytes($input, $output)
	{
		$tmp=tempnam("/tmp", "buildertest_");
		$builder = new Builder($input);
		$bytes = $builder->saveFile($tmp);

		$size = -1;
		if(is_file($tmp))
		{
			$size = filesize($tmp);
			unlink($tmp);
		}

		$this->assertEquals($size, $bytes);
	}

	/**
	 * @covers CodeGun\Ini\Builder::__toString
	 * @dataProvider dataSets
	 */
	public function test__toString($input, $output)
	{
		$builder = new Builder($input);
		$this->assertEquals(
			$output["string"],
			$builder->get()
		);
	}

	/**
	 * @param array $input
	 * @param string $output
	 * @dataProvider needsQuotes
	 */
	public function testQuotes($input, $output)
	{
		$builder = new Builder($input);
		$this->assertEquals(
			$output . "\n",
			$builder->get()
		);
	}


	//
	//// data provider(s)

	/**
	 * @return array
	 */
	public function dataSets()
	{
		return array(
			array(
				array(
					"foo"=>"bar"
				),
				array(
					"array" => array(
						"foo"=>"bar"
					),
					"string" => $this->combine(
						"foo = bar"
					)
				)
			),

			array(
				array(
					"foo"=>"bar",
					"num_arr"=>array(1,2)
				),
				array(
					"array" => array(
						"foo"=>"bar",
						"num_arr[0]" => 1,
						"num_arr[1]" => 2
					),
					"string" => $this->combine(
						"foo = bar",
						"num_arr[0] = 1",
						"num_arr[1] = 2"
					)
				),

				array(
					"array" => array(
						'a' => 'd',
						'b' => array('test'=> 'c'),
						'database' => array(
							'default' => array(
								'name' => 'db',
								'host' => 'master.db',
								'ip'   => 'dd',
							)
						),
						'array' => array('a', '1', 3),
					),
					"string" => $this->combine(
						"a = d",
						"b.test = c",
						"database.default.name = db",
						"database.default.host = master.db",
						"database.default.ip = dd",
						"array[0] = a",
						"array[1] = 1",
						"array[2] = 3"
					)
				),

				array(
					array(
						"array" => array(
							"s1" => 'Spaces 1',
							"s2" => "tab\ttab",
							"s3" => "nl\nnl",
							"e1" => "a=1",
							"q1" => '"hello"'
						)
					)
				)
			),
		);
	}

	/**
	 * @return array
	 */
	public function needsQuotes()
	{
		$tab="\t";
		$nl="\n";
		return array(
			array(
				array("k" => 'Spaces 1'),
				'k = "Spaces 1"'
			),
			array(
				array("k" => "tab{$tab}tab"),
				'k = "tab'.$tab.'tab"'
			),
			array(
				array("k" => "nl{$nl}nl"),
				'k = "nl'.$nl.'nl"'
			),
			array(
				array("k" => "a=1"),
				'k = "a=1"'
			),
			array(
				array("k" => '"hello"'),
				'k = "\\"hello\\""'
			)
		);
	}

	/**
	 * @return string
	 */
	public function combine()
	{
		return join(PHP_EOL, func_get_args()) . PHP_EOL;
	}
}
